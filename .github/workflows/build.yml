name: Signed Android Build and Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  Android_Build:
    name: 🛠️ Build Multi-Architecture APKs
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.extract_version.outputs.version }}
      changelog_content: ${{ steps.extract_version.outputs.changelog_content }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Verify ChangLog.md exists
        id: check_changelog
        run: |
          if [ ! -f "log/ChangLog.md" ]; then
            echo "❌ Error: log/ChangLog.md not found!"
            echo "Available files in log/ directory:"
            ls -la log/ 2>/dev/null || echo "log/ directory does not exist"
            exit 1
          fi
          echo "✅ log/ChangLog.md found"
      
      - name: Extract version and changelog content
        id: extract_version
        run: |
          CHANGELOG_FILE="log/ChangLog.md"
          
          # 提取最新的版本号（第一个遇到的版本号）
          LATEST_VERSION=$(grep -m 1 '^## \[' "$CHANGELOG_FILE" | sed -E 's/^## \[([^]]+)\].*$/\1/')
          
          if [ -z "$LATEST_VERSION" ]; then
            echo "❌ No version found in ChangLog.md"
            exit 1
          fi
          
          echo "Latest version from ChangLog: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # 使用 awk 提取从 '## [版本号]' 开始到下一个 '## [' 之前的内容
          RELEASE_NOTES=$(awk -v version="[$LATEST_VERSION]" '
            $0 ~ "## " version { capture=1; next; }
            capture && /^## \[/ { exit; }
            capture { print; }
          ' "$CHANGELOG_FILE")

          # 去除首尾的空白行，让输出更整洁
          RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed -e '/./,$!d' -e :a -e '/^\n*$/{$d;N;ba;}')

          # 对于 GitHub Actions 的多行输出
          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # 打印调试信息
          echo "Extracted notes for $LATEST_VERSION:"
          echo "----------------------------------------"
          echo "$RELEASE_NOTES"
          echo "----------------------------------------"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: 🔐 Setup signing keystore
        run: |
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "❌ Error: KEYSTORE_BASE64 secret is not set!"
            exit 1
          fi
          
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/release.keystore
          
          if [ ! -f "app/release.keystore" ]; then
            echo "❌ Error: Failed to create keystore file"
            exit 1
          fi
          
          echo "✅ Keystore created successfully"
          ls -la app/release.keystore
      
      - name: 🏗️ Build universal release APK (所有架构)
        run: |
          ./gradlew assembleRelease \
            -PreleaseStoreFile=release.keystore \
            -PreleaseStorePassword=${{ secrets.KEYSTORE_PASSWORD }} \
            -PreleaseKeyAlias=${{ secrets.KEY_ALIAS }} \
            -PreleaseKeyPassword=${{ secrets.KEY_PASSWORD }} \
            --stacktrace \
            --no-daemon \
            --warning-mode=none

          echo "✅ Universal build completed successfully"
      
      - name: 🏗️ Build ARMv7 specific APK (armeabi-v7a)
        run: |
          ./gradlew assembleArmeabiV7aRelease \
            -PreleaseStoreFile=release.keystore \
            -PreleaseStorePassword=${{ secrets.KEYSTORE_PASSWORD }} \
            -PreleaseKeyAlias=${{ secrets.KEY_ALIAS }} \
            -PreleaseKeyPassword=${{ secrets.KEY_PASSWORD }} \
            --stacktrace \
            --no-daemon \
            --warning-mode=none

          echo "✅ ARMv7 build completed successfully"
      
      - name: 🏗️ Build ARMv8 specific APK (arm64-v8a)
        run: |
          ./gradlew assembleArm64V8aRelease \
            -PreleaseStoreFile=release.keystore \
            -PreleaseStorePassword=${{ secrets.KEYSTORE_PASSWORD }} \
            -PreleaseKeyAlias=${{ secrets.KEY_ALIAS }} \
            -PreleaseKeyPassword=${{ secrets.KEY_PASSWORD }} \
            --stacktrace \
            --no-daemon \
            --warning-mode=none

          echo "✅ ARMv8 build completed successfully"
      
      - name: 🏗️ Build x86 specific APK (x86)
        run: |
          ./gradlew assembleX86Release \
            -PreleaseStoreFile=release.keystore \
            -PreleaseStorePassword=${{ secrets.KEYSTORE_PASSWORD }} \
            -PreleaseKeyAlias=${{ secrets.KEY_ALIAS }} \
            -PreleaseKeyPassword=${{ secrets.KEY_PASSWORD }} \
            --stacktrace \
            --no-daemon \
            --warning-mode=none

          echo "✅ x86 build completed successfully"
      
      - name: 🏗️ Build x86_64 specific APK (x86_64)
        run: |
          ./gradlew assembleX86_64Release \
            -PreleaseStoreFile=release.keystore \
            -PreleaseStorePassword=${{ secrets.KEYSTORE_PASSWORD }} \
            -PreleaseKeyAlias=${{ secrets.KEY_ALIAS }} \
            -PreleaseKeyPassword=${{ secrets.KEY_PASSWORD }} \
            --stacktrace \
            --no-daemon \
            --warning-mode=none

          echo "✅ x86_64 build completed successfully"

      - name: 📦 List all generated APK files
        run: |
          echo "📦 All generated APK files:"
          find app/build/outputs -name "*.apk" -exec ls -la {} \;
          echo ""
          echo "📊 APK count by type:"
          find app/build/outputs -name "*.apk" | grep -E "(universal|armeabi-v7a|arm64-v8a|x86|x86_64)" | sort
      
      - name: ⬆️ Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-apks-${{ steps.extract_version.outputs.version }}
          path: |
            app/build/outputs/apk/**/release/*.apk
          # 🚨 移除了 AAB 的上传路径
          retention-days: 7
          if-no-files-found: error

      - name: 🧹 Cleanup keystore
        run: |
          rm -f app/release.keystore
          echo "✅ Keystore cleaned up"

  Create_Release:
    name: 🚀 Create GitHub Release
    needs: Android_Build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 📦 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: signed-apks-${{ needs.Android_Build.outputs.build_version }}
          path: artifacts/
      
      - name: 📋 List downloaded files
        run: |
          echo "📦 Downloaded APK files:"
          find artifacts/ -name "*.apk" -exec echo "✅ {}" \;
          
          APK_COUNT=$(find artifacts/ -name "*.apk" | wc -l)
          
          if [ $APK_COUNT -eq 0 ]; then
            echo "❌ Error: No APK files found in artifacts/"
            exit 1
          fi
          
          echo ""
          echo "📊 Found $APK_COUNT APK files"
      
      - name: 📝 Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.Android_Build.outputs.build_version }}
          name: Release ${{ needs.Android_Build.outputs.build_version }}
          body: |
            ## Changelog
            ${{ needs.Android_Build.outputs.changelog_content }}

            ## 架构说明
            此版本提供了多种架构的APK文件：
            - **📱 Universal**: 通用版本（包含所有架构）
            - **📱 ARMv7 (armeabi-v7a)**: 兼容大多数32位ARM设备
            - **📱 ARMv8 (arm64-v8a)**: 64位ARM架构，现代设备的首选
            - **💻 x86**: Intel/AMD 32位架构
            - **💻 x86_64**: Intel/AMD 64位架构
            # 🚨 移除了 AAB 的说明

            ## 下载建议
            - 大多数现代Android设备：选择 **ARMv8** 版本
            - 较旧的Android设备：选择 **ARMv7** 版本
            - Chromebook或模拟器：选择 **x86** 或 **x86_64** 版本
            - 不确定设备架构：选择 **Universal** 版本

            [查看完整更新日志](https://github.com/${{ github.repository }}/blob/master/log/ChangLog.md)

            *构建和发布过程由GitHub Actions自动化完成。*
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.apk
            # 🚨 移除了 AAB 的上传

      - name: ✅ Release completed
        run: |
          echo "🎉 GitHub Release created successfully!"
          echo "🏷️ Version: ${{ needs.Android_Build.outputs.build_version }}"
          echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"
