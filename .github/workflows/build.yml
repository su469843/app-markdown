name: Android Signed Build and Release Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      custom_version:
        description: '自定义版本号（覆盖ChangLog中的版本号，例如: v1.5.0）'
        required: false
        default: ''

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false'

jobs:
  # 构建环节 - 编译和签名APK
  Android_Build:
    name: 🛠️ Build Signed APK
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.extract_version.outputs.version }}
      changelog_content: ${{ steps.extract_version.outputs.changelog_content }}

    steps:
    # 1. 检出代码
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. 验证ChangLog文件存在
    - name: 📋 Verify ChangLog.md exists
      id: check_changelog
      run: |
        if [ ! -f "log/ChangLog.md" ]; then
          echo "❌ Error: log/ChangLog.md not found!"
          echo "Available files in log/ directory:"
          ls -la log/ 2>/dev/null || echo "log/ directory does not exist"
          exit 1
        fi
        echo "✅ log/ChangLog.md found"

    # 3. 从ChangLog提取版本号和变更内容
    - name: 🏷️ Extract version from ChangLog
      id: extract_version
      run: |
        CHANGELOG_FILE="log/ChangLog.md"
        
        # 优先使用手动输入的版本号
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          VERSION="${{ github.event.inputs.custom_version }}"
          echo "Using custom version: $VERSION"
          CHANGELOG_CONTENT="手动发布版本 $VERSION"
        else
          # 从ChangLog提取最新版本号
          VERSION=$(grep -m 1 '^## \[' "$CHANGELOG_FILE" | sed -E 's/^## \[([^]]+)\].*$/\1/')
          if [ -z "$VERSION" ]; then
            echo "❌ Error: No version found in ChangLog.md"
            echo "First few lines of ChangLog.md:"
            head -10 "$CHANGELOG_FILE"
            exit 1
          fi
          echo "Using version from ChangLog: $VERSION"
          
          # 提取该版本的变更内容
          CHANGELOG_CONTENT=$(awk -v version="$VERSION" '
            BEGIN { found=0; output="" }
            /^## \[/ {
                if (found) exit
                if ($0 ~ "## \\[" version "\\]") {
                    found=1
                    next
                }
            }
            found && /^## \[/ { exit }
            found { 
                if (!($0 ~ /^## \[/)) {
                    output = output $0 "\n"
                }
            }
            END { print output }
          ' "$CHANGELOG_FILE")
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    # 4. 设置Java环境
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    # 5. 设置Android SDK
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v2

    # 6. 设置Gradle执行权限
    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew

    # 7. 从Secrets还原签名密钥库
    - name: 🔐 Setup signing keystore
      run: |
        if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "❌ Error: KEYSTORE_BASE64 secret is not set!"
          exit 1
        fi
        
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/release.keystore
        
        if [ ! -f "app/release.keystore" ]; then
          echo "❌ Error: Failed to create keystore file"
          exit 1
        fi
        
        echo "✅ Keystore created successfully"
        ls -la app/release.keystore

    # 8. 构建签名发布版APK
    - name: 🏗️ Build signed release APK
      run: |
        ./gradlew assembleRelease \
          -PreleaseStoreFile=release.keystore \
          -PreleaseStorePassword=${{ secrets.KEYSTORE_PASSWORD }} \
          -PreleaseKeyAlias=${{ secrets.KEY_ALIAS }} \
          -PreleaseKeyPassword=${{ secrets.KEY_PASSWORD }} \
          --stacktrace \
          --no-daemon \
          --warning-mode=none

        echo "✅ Build completed successfully"
        
        # 显示生成的APK文件
        echo "📦 Generated APK files:"
        find app/build/outputs -name "*.apk" -exec ls -la {} \;

    # 9. 上传构建产物
    - name: ⬆️ Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: signed-apk-${{ steps.extract_version.outputs.version }}
        path: |
          app/build/outputs/apk/release/*.apk
          app/build/outputs/bundle/release/*.aab
        retention-days: 7
        if-no-files-found: error

    # 10. 清理敏感文件
    - name: 🧹 Cleanup keystore
      run: |
        rm -f app/release.keystore
        echo "✅ Keystore cleaned up"

    # 11. 构建完成通知
    - name: ✅ Build completed
      run: |
        echo "🎉 Android build completed successfully!"
        echo "🏷️ Version: ${{ steps.extract_version.outputs.version }}"
        echo "📦 APK files are ready for release"

  # 发布环节 - 创建GitHub Release
  Release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [Android_Build]
    permissions:
      contents: write
      packages: write

    steps:
    # 1. 检出代码（用于Git操作和访问ChangLog）
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. 下载构建产物
    - name: 📥 Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: signed-apk-${{ needs.Android_Build.outputs.build_version }}
        path: ./artifacts

    # 3. 列出下载的文件
    - name: 📋 List downloaded artifacts
      run: |
        echo "📦 Downloaded artifacts for version ${{ needs.Android_Build.outputs.build_version }}:"
        find ./artifacts -type f -name "*.apk" -o -name "*.aab" | while read file; do
          file_size=$(du -h "$file" | cut -f1)
          echo "  - $(basename "$file") ($file_size)"
        done
        
        # 检查是否下载到文件
        if [ -z "$(find ./artifacts -name '*.apk' -o -name '*.aab')" ]; then
          echo "❌ Error: No APK/AAB files found in artifacts"
          exit 1
        fi

    # 4. 生成MD5校验信息
    - name: 🔍 Generate MD5 checksums
      run: |
        echo "📊 Generating MD5 checksums..."
        echo -e '\n## 📦 文件校验信息\n' >> ./release_body.md
        echo '```bash' >> ./release_body.md
        cd artifacts
        md5sum *.apk *.aab 2>/dev/null >> ../release_body.md || echo "No files for md5sum" >> ../release_body.md
        echo '```' >> ./release_body.md
        echo -e '\n---\n' >> ./release_body.md

    # 5. 创建完整的发布说明
- name: 📝 Prepare release notes
  run: |
    VERSION="${{ needs.Android_Build.outputs.build_version }}"
    CHANGELOG_CONTENT="${{ needs.Android_Build.outputs.changelog_content }}"
    
    # 创建发布说明头部
    cat > ./release_header.md << 'EOF'
# 🎉 Release $VERSION

## 📝 变更内容

$CHANGELOG_CONTENT

## 📊 发布信息

- **构建时间**: $(date +"%Y-%m-%d %H:%M:%S")
- **提交版本**: ${GITHUB_SHA:0:8}
- **构建编号**: #$GITHUB_RUN_NUMBER
EOF
    
    # 替换变量（如果使用单引号EOF）
    sed -i "s/\$VERSION/$VERSION/g" ./release_header.md
    sed -i "s/\$CHANGELOG_CONTENT/$CHANGELOG_CONTENT/g" ./release_header.md
    
    # 合并发布说明
    cat ./release_header.md ./release_body.md > ./final_release_notes.md
    rm ./release_header.md ./release_body.md
    
    echo "✅ Release notes prepared:"
    cat ./final_release_notes.md

    # 6. 创建Git标签
    - name: 🏷️ Create Git Tag
      run: |
        VERSION="${{ needs.Android_Build.outputs.build_version }}"
        
        # 配置Git用户信息
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Actions"
        
        # 创建并推送标签
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"
        
        echo "✅ Git tag $VERSION created and pushed"

    # 7. 创建GitHub Release
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.Android_Build.outputs.build_version }}
        name: Release ${{ needs.Android_Build.outputs.build_version }}
        body_path: ./final_release_notes.md
        draft: false
        prerelease: false
        files: |
          artifacts/*.apk
          artifacts/*.aab
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 8. 发布完成通知
    - name: ✅ Release completed
      run: |
        echo "🎉 Release published successfully!"
        echo "🏷️ Version: ${{ needs.Android_Build.outputs.build_version }}"
        echo "📦 Released files:"
        find ./artifacts -name "*.apk" -o -name "*.aab" | while read file; do
          echo "  - $(basename "$file")"
        done
        echo "🔗 Release URL: https://github.com/$GITHUB_REPOSITORY/releases/tag/${{ needs.Android_Build.outputs.build_version }}"