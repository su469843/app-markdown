name: Signed Android Build and Release

on:
  push:
    branches:
      - master  # 推送到master分支时触发构建
  workflow_dispatch:  # 允许手动触发

jobs:
  # 第一个环节：构建签名安卓应用
  Android:
    name: Build Signed Android
    runs-on: ubuntu-latest
    outputs:
      apk_path: ${{ steps.set_outputs.outputs.apk_path }}
      version: ${{ steps.extract_version.outputs.version }}
      changelog_body: ${{ steps.extract_version.outputs.changelog_body }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录，便于解析changelog

    - name: Check ChangLog.md existence
      id: check_changelog
      run: |
        if [ -f "log/ChangLog.md" ]; then
          echo "✅ ChangLog.md found at log/ChangLog.md"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ ChangLog.md not found at log/ChangLog.md"
          echo "exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Extract latest version from ChangLog
      id: extract_version
      run: |
        CHANGELOG_FILE="log/ChangLog.md"
        
        # 提取最新的版本号（第一个遇到的版本号）
        LATEST_VERSION=$(grep -m 1 '^## \[' "$CHANGELOG_FILE" | sed -E 's/^## \[([^]]+)\].*$/\1/')
        
        if [ -z "$LATEST_VERSION" ]; then
          echo "❌ No version found in ChangLog.md"
          exit 1
        fi
        
        echo "Latest version from ChangLog: $LATEST_VERSION"
        echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        
        # 提取该版本的变更内容
        CHANGELOG_BODY=$(awk -v version="$LATEST_VERSION" '
          BEGIN { found=0; output="" }
          /^## \[/ {
              if (found) exit
              if ($0 ~ "## \\[" version "\\]") {
                  found=1
                  next
              }
          }
          found && /^## \[/ { exit }
          found { 
              # 跳过版本标题行本身
              if (!($0 ~ /^## \[/)) {
                  output = output $0 "\n"
              }
          }
          END { print output }
        ' "$CHANGELOG_FILE")
        
        echo "changelog_body<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Decode Keystore from Secrets
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/release.keystore
        echo "✅ Keystore created from secrets"

    - name: Build Signed Release APK
      run: |
        ./gradlew assembleRelease \
          -PreleaseStoreFile=release.keystore \
          -PreleaseStorePassword=${{ secrets.KEYSTORE_PASSWORD }} \
          -PreleaseKeyAlias=${{ secrets.KEY_ALIAS }} \
          -PreleaseKeyPassword=${{ secrets.KEY_PASSWORD }} \
          --stacktrace --no-daemon

    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: signed-apk-${{ steps.extract_version.outputs.version }}
        path: app/build/outputs/apk/release/*.apk
        retention-days: 7

    - name: Set output parameters
      id: set_outputs
      run: |
        APK_PATH=$(ls app/build/outputs/apk/release/*.apk | head -n 1)
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "APK Path: $APK_PATH"

    - name: Cleanup Keystore
      run: rm -f app/release.keystore

 jobs:
  # 你的其他作业，比如构建作业 Android...
  Release:
    name: Release
    runs-on: ubuntu-latest
    needs: [Android] # 这表示 Release 作业依赖于 Android 作业的完成
    permissions:
      contents: write # 确保有写入权限来创建 Release 或标签:cite[7]

    steps:
      # 新增步骤：检出代码仓库
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录，这对某些 Git 操作是必要的

      # 接下来是你原有的其他步骤，例如下载构建产物、执行 Git 命令等
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: your-apk-artifact
          path: ./path-to-download

      - name: Create Git Tag # 这是之前失败的步骤示例
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git tag -a "${{ needs.Android.outputs.version }}" -m "Release ${{ needs.Android.outputs.version }}"
          git push origin "${{ needs.Android.outputs.version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.Android.outputs.version }}
        name: Release ${{ needs.Android.outputs.version }}
        body: |
          # Release ${{ needs.Android.outputs.version }}
          
          ## 变更内容
          ${{ needs.Android.outputs.changelog_body }}
          
          ---
          *构建信息: ${GITHUB_SHA:0:7} @ $(date +"%Y-%m-%d %H:%M:%S")*
        draft: false
        prerelease: false
        files: ${{ steps.apk_info.outputs.apk_file }}

    - name: Release Success Notification
      run: |
        echo "🎉 Signed Release published successfully!"
        echo "🏷️  Version: ${{ needs.Android.outputs.version }}"
        echo "📁 APK: ${{ steps.apk_info.outputs.apk_name }}"
        echo "🔗 Release created for tag: ${{ needs.Android.outputs.version }}"
        echo "⏰ Published at: $(date)"